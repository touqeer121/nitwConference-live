# Generated by Django 3.2 on 2021-07-06 07:04

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import gdstorage.storage


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Abstract',
            fields=[
                ('abs_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('track', models.CharField(max_length=500)),
                ('prefix', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('is_finally_approved', models.BooleanField(blank=True, default=False)),
                ('is_finally_rejected', models.BooleanField(blank=True, default=False)),
                ('remark', models.CharField(blank=True, default='', max_length=5000)),
                ('is_approved_by_A', models.BooleanField(blank=True, default=False)),
                ('is_rejected_by_A', models.BooleanField(blank=True, default=False)),
                ('is_approved_by_B', models.BooleanField(blank=True, default=False)),
                ('is_rejected_by_B', models.BooleanField(blank=True, default=False)),
                ('status_C', models.CharField(blank=True, default='2', max_length=1)),
                ('remark_A', models.CharField(blank=True, default='', max_length=5000)),
                ('remark_B', models.CharField(blank=True, default='', max_length=5000)),
                ('remark_C', models.CharField(blank=True, default='', max_length=5000)),
                ('track_A', models.CharField(blank=True, default='A', max_length=5000, null=True)),
                ('track_B', models.CharField(blank=True, default='admin', max_length=5000, null=True)),
                ('country', models.CharField(blank=True, default='undefined', max_length=5000, null=True)),
                ('state', models.CharField(blank=True, default='undefined', max_length=500, null=True)),
                ('institution', models.CharField(max_length=1000)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Invalid Mobile Number', regex='[0-9]{10}')])),
                ('paper_title', models.CharField(max_length=500)),
                ('abstract_affiliation_pdf', models.FileField(null=True, storage=gdstorage.storage.GoogleDriveStorage(), upload_to='maps', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('abstract_pdf', models.FileField(null=True, storage=gdstorage.storage.GoogleDriveStorage(), upload_to='maps', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('submission_date', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Author_Type',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('author_type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ContactUsMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message='Invalid Mobile Number', regex='[0-9]{10}')])),
                ('subject', models.CharField(max_length=100)),
                ('message', models.CharField(max_length=1000)),
                ('has_been_read', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='EmailInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corresponding_id', models.CharField(blank=True, default='unknown', max_length=1000)),
                ('mail_reason', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('general_info', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('sent_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='EmailQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corresponding_id', models.CharField(blank=True, default='unknown', max_length=1000)),
                ('mail_reason', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('general_info', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('pending_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('map_name', models.CharField(max_length=200)),
                ('map_data', models.FileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to='maps')),
            ],
        ),
        migrations.CreateModel(
            name='Full_Paper_Count',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_paper_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Paper_Count',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Ppt_Count',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ppt_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Query',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asked_to', models.CharField(blank=True, default='unknown', max_length=500)),
                ('name', models.CharField(blank=True, default='unknown', max_length=500)),
                ('registration_id', models.CharField(blank=True, default='unknown', max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('query', models.CharField(blank=True, default='unknown', max_length=50000)),
                ('institution', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='ReceivedException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function_name', models.CharField(blank=True, default='unknown', max_length=1000)),
                ('corresponding_id', models.CharField(blank=True, default='unknown', max_length=1000)),
                ('exception_args', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('exception_message', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('general_info', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('current_user_info', models.CharField(blank=True, default='unknown', max_length=10000)),
                ('exception_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('registration_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('payment_method', models.CharField(blank=True, default='unknown', max_length=200)),
                ('transaction_id', models.CharField(blank=True, default='unknown', max_length=100)),
                ('prefix', models.CharField(blank=True, max_length=100, null=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('id_status', models.CharField(blank=True, default='2', max_length=1)),
                ('payment_status', models.CharField(blank=True, default='2', max_length=1)),
                ('country', models.CharField(blank=True, default='undefined', max_length=5000, null=True)),
                ('state', models.CharField(blank=True, default='undefined', max_length=500, null=True)),
                ('institution', models.CharField(max_length=1000)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Invalid Mobile Number', regex='[0-9]{10}')])),
                ('id_proof', models.FileField(blank=True, default='undefined', null=True, storage=gdstorage.storage.GoogleDriveStorage(), upload_to='maps', validators=[django.core.validators.FileExtensionValidator(['png', 'pdf', 'jpeg', 'jpg'])])),
                ('remark', models.CharField(blank=True, default='', max_length=5000)),
                ('registration_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('abstract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='conference.abstract', verbose_name='Abstract')),
                ('author_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='conference.author_type', verbose_name='Author_Type')),
            ],
        ),
        migrations.CreateModel(
            name='Registration_Count',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Registration_Type',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('registration_type', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('registration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='Receipt', serialize=False, to='conference.registration', verbose_name='Registration')),
                ('receipt_file', models.FileField(blank=True, default='undefined', null=True, storage=gdstorage.storage.GoogleDriveStorage(), upload_to='receipts', validators=[django.core.validators.FileExtensionValidator(['png', 'pdf', 'jpeg', 'jpg'])])),
            ],
        ),
        migrations.AddField(
            model_name='registration',
            name='registration_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='conference.registration_type', verbose_name='Registration_Type'),
        ),
        migrations.CreateModel(
            name='Ppt',
            fields=[
                ('ppt_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('track', models.CharField(max_length=500)),
                ('prefix', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('status', models.CharField(blank=True, default='2', max_length=1)),
                ('status_A', models.CharField(blank=True, default='2', max_length=1)),
                ('status_B', models.CharField(blank=True, default='2', max_length=1)),
                ('remark', models.CharField(blank=True, default='', max_length=5000)),
                ('remark_A', models.CharField(blank=True, default='', max_length=5000)),
                ('remark_B', models.CharField(blank=True, default='', max_length=5000)),
                ('track_A', models.CharField(blank=True, default='A', max_length=5000, null=True)),
                ('track_B', models.CharField(blank=True, default='admin', max_length=5000, null=True)),
                ('country', models.CharField(blank=True, default='undefined', max_length=5000, null=True)),
                ('state', models.CharField(blank=True, default='undefined', max_length=500, null=True)),
                ('institution', models.CharField(max_length=1000)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Invalid Mobile Number', regex='[0-9]{10}')])),
                ('ppt_title', models.CharField(max_length=500)),
                ('ppt_pdf', models.FileField(storage=gdstorage.storage.GoogleDriveStorage(), upload_to='maps', validators=[django.core.validators.FileExtensionValidator(['ppt', 'pptx'])])),
                ('submission_date', models.DateTimeField()),
                ('abstract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='conference.abstract', verbose_name='Abstract')),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('paper_id', models.CharField(max_length=100, primary_key=True, serialize=False)),
                ('track', models.CharField(max_length=500)),
                ('prefix', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('status', models.CharField(blank=True, default='2', max_length=1)),
                ('status_A', models.CharField(blank=True, default='2', max_length=1)),
                ('status_B', models.CharField(blank=True, default='2', max_length=1)),
                ('remark', models.CharField(blank=True, default='', max_length=5000)),
                ('remark_A', models.CharField(blank=True, default='', max_length=5000)),
                ('remark_B', models.CharField(blank=True, default='', max_length=5000)),
                ('track_A', models.CharField(blank=True, default='A', max_length=5000, null=True)),
                ('track_B', models.CharField(blank=True, default='admin', max_length=5000, null=True)),
                ('country', models.CharField(blank=True, default='undefined', max_length=5000, null=True)),
                ('state', models.CharField(blank=True, default='undefined', max_length=500, null=True)),
                ('institution', models.CharField(max_length=1000)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=100, validators=[django.core.validators.RegexValidator(message='Invalid Mobile Number', regex='[0-9]{10}')])),
                ('paper_title', models.CharField(max_length=500)),
                ('paper_affiliation_pdf', models.FileField(null=True, storage=gdstorage.storage.GoogleDriveStorage(), upload_to='maps', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('paper_manuscript_pdf', models.FileField(null=True, storage=gdstorage.storage.GoogleDriveStorage(), upload_to='maps', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('submission_date', models.DateTimeField()),
                ('abstract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='conference.abstract', verbose_name='Abstract')),
            ],
        ),
    ]
